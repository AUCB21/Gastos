#!/usr/bin/env python
"""
MIGRACI√ìN SEGURA A GRUPOS
Este script ayuda a migrar de manera segura implementando el modelo Grupo
manteniendo todos los datos existentes.
"""

import os
import sys
import django
from pathlib import Path

# Setup Django
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "gastos.settings")

def paso1_verificar_estado():
    """Verificar el estado actual de la base de datos"""
    print("üîç PASO 1: VERIFICANDO ESTADO ACTUAL")
    print("=" * 50)
    
    django.setup()
    from django.db import connection
    from django.core.management import call_command
    
    # Verificar conexi√≥n
    print("‚úì Conexi√≥n a base de datos establecida")
    print(f"  Engine: {connection.settings_dict['ENGINE']}")
    print(f"  Database: {connection.settings_dict.get('NAME', 'No especificado')}")
    
    # Verificar tablas existentes
    cursor = connection.cursor()
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name LIKE 'api_%'
        ORDER BY table_name;
    """)
    
    existing_tables = [row[0] for row in cursor.fetchall()]
    print(f"\nüìã Tablas existentes ({len(existing_tables)}):")
    for table in existing_tables:
        print(f"  - {table}")
    
    # Verificar si necesitamos migrar
    needs_migration = 'api_grupo' not in existing_tables
    
    if needs_migration:
        print("\n‚ö†Ô∏è  DIAGN√ìSTICO: Necesitas crear las tablas de Grupo")
        return "create_tables"
    else:
        print("\n‚úÖ Las tablas de Grupo ya existen")
        return "tables_exist"

def paso2_crear_migracion_personalizada():
    """Crear una migraci√≥n personalizada para los modelos nuevos"""
    print("\nüõ†Ô∏è  PASO 2: CREANDO MIGRACI√ìN PERSONALIZADA")
    print("=" * 50)
    
    from django.core.management import call_command
    from django.db.migrations.writer import MigrationWriter
    from django.db import models
    from django.db.migrations import CreateModel, AddField, AddIndex
    from django.conf import settings
    
    # Crear archivo de migraci√≥n
    migration_content = '''
# Generated by safe migration script
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Crear tabla Grupo solo si no existe
        migrations.RunSQL(
            sql="""
            CREATE TABLE IF NOT EXISTS api_grupo (
                id SERIAL PRIMARY KEY,
                name VARCHAR(200) NOT NULL,
                description TEXT DEFAULT '',
                grupo_type VARCHAR(20) DEFAULT 'shared',
                default_currency VARCHAR(3) DEFAULT 'ARS',
                is_active BOOLEAN DEFAULT true,
                allow_new_members BOOLEAN DEFAULT true,
                owner_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW(),
                start_date DATE,
                end_date DATE
            );
            """,
            reverse_sql="DROP TABLE IF EXISTS api_grupo CASCADE;"
        ),
        
        # Crear tabla GrupoMembership solo si no existe
        migrations.RunSQL(
            sql="""
            CREATE TABLE IF NOT EXISTS api_grupo_membership (
                id SERIAL PRIMARY KEY,
                grupo_id INTEGER NOT NULL REFERENCES api_grupo(id) ON DELETE CASCADE,
                user_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
                role VARCHAR(10) DEFAULT 'member',
                is_active BOOLEAN DEFAULT true,
                can_add_expenses BOOLEAN DEFAULT true,
                can_edit_expenses BOOLEAN DEFAULT false,
                can_manage_members BOOLEAN DEFAULT false,
                joined_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW(),
                UNIQUE(grupo_id, user_id)
            );
            """,
            reverse_sql="DROP TABLE IF EXISTS api_grupo_membership CASCADE;"
        ),
        
        # Agregar columna grupo a tabla gasto (si no existe)
        migrations.RunSQL(
            sql="""
            ALTER TABLE api_gasto 
            ADD COLUMN IF NOT EXISTS grupo_id INTEGER REFERENCES api_grupo(id);
            """,
            reverse_sql="ALTER TABLE api_gasto DROP COLUMN IF EXISTS grupo_id;"
        ),
        
        # Agregar columna grupo a tabla medio_pago (si no existe)
        migrations.RunSQL(
            sql="""
            ALTER TABLE api_medio_pago 
            ADD COLUMN IF NOT EXISTS grupo_id INTEGER REFERENCES api_grupo(id);
            """,
            reverse_sql="ALTER TABLE api_medio_pago DROP COLUMN IF EXISTS grupo_id;"
        ),
        
        # Crear √≠ndices
        migrations.RunSQL(
            sql="""
            CREATE INDEX IF NOT EXISTS api_grupo_owner_idx ON api_grupo(owner_id);
            CREATE INDEX IF NOT EXISTS api_grupo_active_idx ON api_grupo(is_active);
            CREATE INDEX IF NOT EXISTS api_grupo_type_idx ON api_grupo(grupo_type);
            CREATE INDEX IF NOT EXISTS api_grupo_membership_grupo_idx ON api_grupo_membership(grupo_id, is_active);
            CREATE INDEX IF NOT EXISTS api_grupo_membership_user_idx ON api_grupo_membership(user_id, is_active);
            CREATE INDEX IF NOT EXISTS api_gasto_grupo_idx ON api_gasto(grupo_id);
            CREATE INDEX IF NOT EXISTS api_medio_pago_grupo_idx ON api_medio_pago(grupo_id);
            """,
            reverse_sql="""
            DROP INDEX IF EXISTS api_grupo_owner_idx;
            DROP INDEX IF EXISTS api_grupo_active_idx;
            DROP INDEX IF EXISTS api_grupo_type_idx;
            DROP INDEX IF EXISTS api_grupo_membership_grupo_idx;
            DROP INDEX IF EXISTS api_grupo_membership_user_idx;
            DROP INDEX IF EXISTS api_gasto_grupo_idx;
            DROP INDEX IF EXISTS api_medio_pago_grupo_idx;
            """
        ),
    ]
'''
    
    # Escribir archivo de migraci√≥n
    migration_file = Path('api/migrations/0002_add_grupos_safely.py')
    migration_file.write_text(migration_content.strip())
    
    print(f"‚úì Migraci√≥n creada en: {migration_file}")
    return str(migration_file)

def paso3_aplicar_migracion():
    """Aplicar la migraci√≥n personalizada"""
    print("\nüöÄ PASO 3: APLICANDO MIGRACI√ìN")
    print("=" * 50)
    
    from django.core.management import call_command
    
    try:
        call_command('migrate', 'api', verbosity=2)
        print("‚úÖ Migraci√≥n aplicada exitosamente")
        return True
    except Exception as e:
        print(f"‚ùå Error aplicando migraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ MIGRACI√ìN SEGURA A GRUPOS")
    print("=" * 50)
    print("Este script crear√° las tablas necesarias sin perder datos")
    print()
    
    response = input("¬øContinuar? (y/n): ").lower()
    if response not in ['y', 'yes']:
        print("Migraci√≥n cancelada.")
        return
    
    # Paso 1: Verificar estado
    estado = paso1_verificar_estado()
    
    if estado == "create_tables":
        # Paso 2: Crear migraci√≥n
        migration_file = paso2_crear_migracion_personalizada()
        
        # Paso 3: Aplicar migraci√≥n
        success = paso3_aplicar_migracion()
        
        if success:
            print("\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!")
            print("\nPr√≥ximos pasos:")
            print("1. Verificar que el admin funcione")
            print("2. Crear tu primer grupo de prueba")
            print("3. Probar las funcionalidades")
        else:
            print("\n‚ùå Migraci√≥n fall√≥. Revisa los errores arriba.")
    else:
        print("\n‚úÖ No se necesita migraci√≥n. Las tablas ya existen.")
    
if __name__ == "__main__":
    main()