# Generated by Django 5.2.6 on 2025-09-26 03:17

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del grupo/viaje/evento', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descripción del grupo', max_length=500)),
                ('grupo_type', models.CharField(choices=[('trip', 'Viaje'), ('grupo', 'Grupo'), ('event', 'Evento'), ('shared', 'Gastos Compartidos')], default='shared', max_length=20)),
                ('default_currency', models.CharField(choices=[('ARS', 'Peso Argentino'), ('USD', 'Dolar Americano'), ('EUR', 'Euro'), ('BRL', 'Real Brasileño'), ('CLP', 'Peso Chileno')], default='ARS', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('allow_new_members', models.BooleanField(default=True, help_text='Permitir que se agreguen nuevos miembros')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='Fecha de inicio del grupo', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Fecha de fin del grupo', null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_grupos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_grupo',
                'ordering': ['-updated_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GrupoMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Propietario'), ('admin', 'Administrador'), ('member', 'Miembro'), ('viewer', 'Solo Vista')], default='member', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('can_add_expenses', models.BooleanField(default=True)),
                ('can_edit_expenses', models.BooleanField(default=False)),
                ('can_manage_members', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.grupo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_grupo_membership',
            },
        ),
        migrations.AddField(
            model_name='grupo',
            name='members',
            field=models.ManyToManyField(related_name='grupos', through='api.GrupoMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, help_text='Username o email usado en el intento', max_length=150)),
                ('ip_address', models.GenericIPAddressField(blank=True, db_index=True, null=True)),
                ('successful', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_cleanup_at', models.DateTimeField(blank=True, help_text='Marca cuándo se realizó la última limpieza de intentos antiguos', null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_login_attempt',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedioPago',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ente_emisor', models.CharField(max_length=100)),
                ('tipo', models.CharField(max_length=8)),
                ('tipo_tarjeta', models.CharField(blank=True, max_length=16)),
                ('extra', models.CharField(blank=True, max_length=64)),
                ('grupo', models.ForeignKey(blank=True, help_text='Grupo asociado (opcional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medios_pago', to='api.grupo')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='medios_pago', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_medio_pago',
            },
        ),
        migrations.CreateModel(
            name='Gasto',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('monto', models.FloatField()),
                ('moneda', models.CharField(choices=[('ARS', 'Peso Argentino'), ('USD', 'Dolar Americano'), ('EUR', 'Euro'), ('BRL', 'Real Brasileño'), ('CLP', 'Peso Chileno'), ('NA', 'Otros')], default='ARS', max_length=3)),
                ('pagos_realizados', models.IntegerField()),
                ('pagos_totales', models.IntegerField()),
                ('vendedor', models.CharField(max_length=128)),
                ('categoria', models.CharField(choices=[('finanzas', 'Finanzas'), ('salud', 'Salud'), ('transporte', 'Transporte'), ('comida', 'Comida'), ('indumentaria', 'Indumentaria'), ('tecnologia', 'Tecnologia'), ('inversiones', 'Inversiones'), ('alojamiento', 'Alojamiento'), ('entretenimiento', 'Entretenimiento'), ('otros', 'Otros')], default='otros', max_length=24)),
                ('comentarios', models.TextField(blank=True, max_length=256)),
                ('fecha_gasto', models.DateField()),
                ('is_shared', models.BooleanField(default=False, help_text='Si es un gasto compartido entre miembros del proyecto')),
                ('split_type', models.CharField(choices=[('equal', 'División Igual'), ('percentage', 'Por Porcentaje'), ('amount', 'Por Monto Fijo'), ('custom', 'Personalizado')], default='equal', help_text='Tipo de división del gasto', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paid_by', models.ForeignKey(blank=True, help_text='Quien pagó realmente el gasto', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gastos_pagados', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(default=1, help_text='Usuario que registró el gasto', on_delete=django.db.models.deletion.CASCADE, related_name='gastos', to=settings.AUTH_USER_MODEL)),
                ('grupo', models.ForeignKey(blank=True, help_text='Grupo asociado', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gastos', to='api.grupo')),
                ('medio_pago', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mediopago')),
            ],
            options={
                'db_table': 'api_gasto',
                'ordering': ['-fecha_gasto', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TokenActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_jti', models.CharField(db_index=True, help_text='JWT Token ID (jti claim)', max_length=255, unique=True)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now, help_text='Last activity timestamp')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this token is still active')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string for tracking different devices')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the client', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_token_activity',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='ExpenseSplit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='Monto que debe pagar este usuario')),
                ('percentage', models.FloatField(blank=True, help_text='Porcentaje del total (si aplica)', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('paid', 'Pagado'), ('confirmed', 'Confirmado'), ('disputed', 'Disputado')], default='pending', max_length=10)),
                ('paid_amount', models.FloatField(default=0, help_text='Monto ya pagado por este usuario')),
                ('paid_date', models.DateTimeField(blank=True, help_text='Fecha de pago', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Notas sobre este split', max_length=200)),
                ('paid_to', models.ForeignKey(blank=True, help_text='A quién se le pagó', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_payments', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='Usuario que debe pagar esta parte', on_delete=django.db.models.deletion.CASCADE, related_name='expense_splits', to=settings.AUTH_USER_MODEL)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expense_splits', to='api.gasto')),
            ],
            options={
                'db_table': 'api_expense_split',
                'indexes': [models.Index(fields=['expense'], name='api_expense_expense_9ea98f_idx'), models.Index(fields=['user'], name='api_expense_user_id_e14808_idx'), models.Index(fields=['status'], name='api_expense_status_3aed04_idx')],
                'unique_together': {('expense', 'user')},
            },
        ),
        migrations.CreateModel(
            name='GrupoInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email del usuario invitado', max_length=254)),
                ('role', models.CharField(choices=[('owner', 'Propietario'), ('admin', 'Administrador'), ('member', 'Miembro'), ('viewer', 'Solo Vista')], default='member', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pendiente'), ('accepted', 'Aceptada'), ('declined', 'Rechazada'), ('expired', 'Expirada')], default='pending', max_length=10)),
                ('can_add_expenses', models.BooleanField(default=True)),
                ('can_edit_expenses', models.BooleanField(default=False)),
                ('can_manage_members', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='Fecha de expiración de la invitación')),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('invitation_token', models.CharField(help_text='Token único para la invitación', max_length=100, unique=True)),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='api.grupo')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('invited_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_grupo_invitation',
                'indexes': [models.Index(fields=['grupo'], name='api_grupo_i_grupo_i_f03347_idx'), models.Index(fields=['invited_user'], name='api_grupo_i_invited_1754f5_idx'), models.Index(fields=['status'], name='api_grupo_i_status_e44670_idx'), models.Index(fields=['invitation_token'], name='api_grupo_i_invitat_52f3c4_idx')],
                'unique_together': {('grupo', 'email')},
            },
        ),
        migrations.AddIndex(
            model_name='grupomembership',
            index=models.Index(fields=['grupo', 'is_active'], name='api_grupo_m_grupo_i_26765a_idx'),
        ),
        migrations.AddIndex(
            model_name='grupomembership',
            index=models.Index(fields=['user', 'is_active'], name='api_grupo_m_user_id_49b936_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grupomembership',
            unique_together={('grupo', 'user')},
        ),
        migrations.AddIndex(
            model_name='grupo',
            index=models.Index(fields=['owner'], name='api_grupo_owner_i_73b739_idx'),
        ),
        migrations.AddIndex(
            model_name='grupo',
            index=models.Index(fields=['is_active'], name='api_grupo_is_acti_4bbb29_idx'),
        ),
        migrations.AddIndex(
            model_name='grupo',
            index=models.Index(fields=['grupo_type'], name='api_grupo_grupo_t_e7d8b3_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['identifier', 'created_at'], name='api_login_a_identif_22ebba_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['ip_address', 'created_at'], name='api_login_a_ip_addr_15a9f7_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['last_cleanup_at'], name='api_login_a_last_cl_143641_idx'),
        ),
        migrations.AddIndex(
            model_name='mediopago',
            index=models.Index(fields=['user'], name='api_medio_p_user_id_ea7452_idx'),
        ),
        migrations.AddIndex(
            model_name='mediopago',
            index=models.Index(fields=['grupo'], name='api_medio_p_grupo_i_74584d_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['user'], name='api_gasto_user_id_ccebaa_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['grupo'], name='api_gasto_grupo_i_84a886_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['fecha_gasto'], name='api_gasto_fecha_g_80b57b_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['categoria'], name='api_gasto_categor_317e7b_idx'),
        ),
        migrations.AddIndex(
            model_name='gasto',
            index=models.Index(fields=['is_shared'], name='api_gasto_is_shar_a27b1b_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenactivity',
            index=models.Index(fields=['token_jti'], name='api_token_a_token_j_99acef_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenactivity',
            index=models.Index(fields=['user', 'is_active'], name='api_token_a_user_id_b2a8a4_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenactivity',
            index=models.Index(fields=['last_activity'], name='api_token_a_last_ac_fc6769_idx'),
        ),
    ]
