# Generated by safe migration script
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Crear tabla Grupo solo si no existe
        migrations.RunSQL(
            sql="""
            CREATE TABLE IF NOT EXISTS api_grupo (
                id SERIAL PRIMARY KEY,
                name VARCHAR(200) NOT NULL,
                description TEXT DEFAULT '',
                grupo_type VARCHAR(20) DEFAULT 'shared',
                default_currency VARCHAR(3) DEFAULT 'ARS',
                is_active BOOLEAN DEFAULT true,
                allow_new_members BOOLEAN DEFAULT true,
                owner_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW(),
                start_date DATE,
                end_date DATE
            );
            """,
            reverse_sql="DROP TABLE IF EXISTS api_grupo CASCADE;"
        ),
        
        # Crear tabla GrupoMembership solo si no existe
        migrations.RunSQL(
            sql="""
            CREATE TABLE IF NOT EXISTS api_grupo_membership (
                id SERIAL PRIMARY KEY,
                grupo_id INTEGER NOT NULL REFERENCES api_grupo(id) ON DELETE CASCADE,
                user_id INTEGER NOT NULL REFERENCES auth_user(id) ON DELETE CASCADE,
                role VARCHAR(10) DEFAULT 'member',
                is_active BOOLEAN DEFAULT true,
                can_add_expenses BOOLEAN DEFAULT true,
                can_edit_expenses BOOLEAN DEFAULT false,
                can_manage_members BOOLEAN DEFAULT false,
                joined_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW(),
                UNIQUE(grupo_id, user_id)
            );
            """,
            reverse_sql="DROP TABLE IF EXISTS api_grupo_membership CASCADE;"
        ),
        
        # Agregar columna grupo a tabla gasto (si no existe)
        migrations.RunSQL(
            sql="""
            ALTER TABLE api_gasto 
            ADD COLUMN IF NOT EXISTS grupo_id INTEGER REFERENCES api_grupo(id);
            """,
            reverse_sql="ALTER TABLE api_gasto DROP COLUMN IF EXISTS grupo_id;"
        ),
        
        # Agregar columna grupo a tabla medio_pago (si no existe)
        migrations.RunSQL(
            sql="""
            ALTER TABLE api_medio_pago 
            ADD COLUMN IF NOT EXISTS grupo_id INTEGER REFERENCES api_grupo(id);
            """,
            reverse_sql="ALTER TABLE api_medio_pago DROP COLUMN IF EXISTS grupo_id;"
        ),
        
        # Crear índices
        migrations.RunSQL(
            sql="""
            CREATE INDEX IF NOT EXISTS api_grupo_owner_idx ON api_grupo(owner_id);
            CREATE INDEX IF NOT EXISTS api_grupo_active_idx ON api_grupo(is_active);
            CREATE INDEX IF NOT EXISTS api_grupo_type_idx ON api_grupo(grupo_type);
            CREATE INDEX IF NOT EXISTS api_grupo_membership_grupo_idx ON api_grupo_membership(grupo_id, is_active);
            CREATE INDEX IF NOT EXISTS api_grupo_membership_user_idx ON api_grupo_membership(user_id, is_active);
            CREATE INDEX IF NOT EXISTS api_gasto_grupo_idx ON api_gasto(grupo_id);
            CREATE INDEX IF NOT EXISTS api_medio_pago_grupo_idx ON api_medio_pago(grupo_id);
            """,
            reverse_sql="""
            DROP INDEX IF EXISTS api_grupo_owner_idx;
            DROP INDEX IF EXISTS api_grupo_active_idx;
            DROP INDEX IF EXISTS api_grupo_type_idx;
            DROP INDEX IF EXISTS api_grupo_membership_grupo_idx;
            DROP INDEX IF EXISTS api_grupo_membership_user_idx;
            DROP INDEX IF EXISTS api_gasto_grupo_idx;
            DROP INDEX IF EXISTS api_medio_pago_grupo_idx;
            """
        ),
    ]